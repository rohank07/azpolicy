apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: testdeployment
spec:
  crd:
    spec:
      names:
        kind: TestDeployment
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package testdeployment

        import data.lib.exclude_container_image.is_excluded

        missing(obj, field) = true {
          not obj[field]
        }

        missing(obj, field) = true {
          obj[field] == ""
        }

        violation[{"msg": msg, "field": field}] {
          container := input.review.object.spec[field][_]
          not input_container_excluded(container.name)
          not is_excluded(container)

          request_missing := missing(container.resources.requests, "memory") {
            field == "memory"
          } else missing(container.resources.requests, "cpu") {
            field == "cpu"
          }

          limit_missing := missing(container.resources.limits, "memory") {
            field == "memory"
          } else missing(container.resources.limits, "cpu") {
            field == "cpu"
          }

          request_or_limit_missing := request_missing or limit_missing
          msg := sprintf("container <%v> has no %v %v", [container.name, field, if request_missing { "request" } else { "limit" }])
        }

        input_container_excluded(name) {
          _matches_exclusion(name, input.parameters.excludedContainers[_])
        }
