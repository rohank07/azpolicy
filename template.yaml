apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sazurev3containerlimitsrequests
spec:
  crd:
    spec:
      names:
        kind: K8sAzureV3ContainerLimitsRequests
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sazurev3containerlimitsrequests

        import data.lib.exclude_container_image.is_excluded

        missing(obj, field) = true {
          not obj[field]
        }

        missing(obj, field) = true {
          obj[field] == ""
        }

        violation[{"msg": msg, "field": field}] {
          container := input.review.object.spec[field][_]
          not is_excluded(container)

          request_memory_missing := missing(container.resources.requests, "memory")
            field == "memory"

          request_cpu_missing := missing(container.resources.requests, "cpu")
            field == "cpu"


          limit_memory_missing := missing(container.resources.limits, "memory")
            field == "memory"


        msg := sprintf("TEST container <%v> has no memory request", [container.name]); request_memory_missing
        msg = sprintf(" TEST container <%v> has no CPU request", [container.name]); request_cpu_missing
        msg = sprintf(" TEST container <%v> has no memory limit", [container.name]); limit_memory_missing
        }

      libs:
        - |
          package lib.exclude_container_image
          is_excluded(container) {
              exclude_images := object.get(object.get(input, "parameters", {}), "excludedImages", [])
              img := container.image
              exclusion := exclude_images[_]
              _matches_exclusion(img, exclusion)
          }
          _matches_exclusion(img, exclusion) {
              not endswith(exclusion, "*")
              exclusion == img
          }
          _matches_exclusion(img, exclusion) {
              endswith(exclusion, "*")
              prefix := trim_suffix(exclusion, "*")
              startswith(img, prefix)
          }
